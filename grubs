#!/bin/bash
set -eu

# Copyright (c) 2014 Daniel Wayne Armstrong. All rights reserved.
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPLv2) published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the LICENSE file for more details.

# NOTES
# * GRUBS Reanimated USB Boot Stick
#   http://www.circuidipity.com/grubs.html>

# Script variables
script_name="GRUBS"
script_command="grubs"
script_description="GRUBS Reanimated USB Boot Stick"
script_synopsis="$script_command [OPTION] DEVICE"
script_src="https://github.com/vonbrownie/grubs/blob/master/grubs"
script_depends="grub2-common, dosfstools, rsync"
script_device="${@: -1}"
## -------------- MODIFY -------------- ##
## Location of Linux iso images
iso_dir="$HOME/GRUBS/iso"
## GRUB grub.cfg for the USB stick
grub_conf="$HOME/GRUBS/grub.cfg"
## ------------------------------------ ##

# Functions
echo_red() {
echo -e "\E[1;31m$1"
echo -e '\e[0m'
}

echo_green() {
echo -e "\E[1;32m$1"
echo -e '\e[0m'
}

echo_yellow() {
echo -e "\E[1;33m$1"
echo -e '\e[0m'
}

echo_cyan() {
echo -e "\E[1;36m$1"
echo -e '\e[0m'
}

penguinista() {
cat << _EOF_
(O<
(/)_
_EOF_
}

script_options() {
cat << _EOF_
OPTIONS
  -h    print command syntax and options
  -i    directory containing Linux *.iso images
  -c    grub.cfg for USB stick
_EOF_
}

full_script_description() {
echo ""
echo_yellow "$( penguinista ) .: $script_name -- $script_description"
echo_cyan "SOURCE: $script_src"
echo_cyan "SYNOPSIS: $script_synopsis"
script_options
cat << _EOF_
EXAMPLE
  Prepare a USB stick partition identified as /dev/sde1:
  $ sudo $script_command -i $iso_dir -c $grub_conf sde1
_EOF_
}

run_options() {
while getopts ":hi:c:" OPT
do
    case $OPT in
        h)
            full_script_description
            exit
            ;;
        i)
            iso_dir="$OPTARG"
            ;;
        c)
            grub_conf="$OPTARG"
            ;;
        :)
            echo_red "$( penguinista ) .: Option '-$OPTARG' requires an argument."
            exit 1
            ;;
        ?)
            echo ""
            echo_red "$( penguinista ) .: ERROR: Invalid option '-$OPTARG'"
            script_options
            exit 1
            ;;
    esac
done
}

greeting() {
cat << _EOF_

Howdy! $script_name transforms a standard USB stick into a dual-purpose DEVICE
that is both a storage medium usable under Linux, Windows, and Mac OS and a
GRUB boot device packing multiple Linux distros.

See: "Transform a USB stick into a boot device packing multiple Linux distros"
http://www.circuidipity.com/multi-boot-usb.html

### WARNING ###
Make careful note of the drive and partition labels on your system!

You have chosen '$script_device' as DEVICE.

The INSTALL option will **destroy all data** currently stored on '$script_device'.

This script should be run with ROOT privileges. Please check it before
use in a text editor and make any required modifications.

_EOF_
}

invalid_reply() {
echo ""
echo_red "'${REPLY}' is invalid input..."
}

invalid_reply_yn() {
echo ""
echo_red "'${REPLY}' is invalid input. Please select 'Y(es)' or 'N(o)'..."
}

confirm_start() {
while :
do
    read -n 1 -p "Run script now? [yN] > "
    if [[ $REPLY == [yY] ]]
    then
        echo ""
        echo "Let's roll then ..."
        break
    elif [[ $REPLY == [nN] || $REPLY == "" ]]
    then
        echo ""
        echo ""
        echo_green "$( penguinista )"
        exit
    else
        invalid_reply_yn
    fi
done
}

hello_world() {
clear
full_script_description
greeting
confirm_start
}

test_root() {
if [[ $UID -ne 0 ]]
then
    echo ""
    echo_red "$( penguinista ) .: ERROR: $script_name requires ROOT privileges to do its job."
    exit 1
fi
}

test_script_device() {
if [[ -z $script_device ]]
then
    echo ""
    echo_red "$( penguinista ) .: ERROR: $script_name requires the DEVICE argument."
    exit 1
fi
if [[ ! -b /dev/$script_device ]] || [[ ! $script_device == sd[b-z]1 ]]
then
    echo ""
    echo_red "$( penguinista ) .: ERROR: '$script_device' not available for use."
    echo "FIX: DEVICE argument must be 'sd[b-z]1'."
    exit 1
fi
}

test_variable() {
if [[ ! -d $iso_dir ]]
then
echo ""
echo_red "$( penguinista ) .: ERROR: '$iso_dir' not a valid location."
cat << _EOF_
FIX: Set a temporary location with '-i /path/to/linux/iso_images' option
or a permanent location by opening $script_name in a text editor and modifying
the 'iso_dir' variable.

_EOF_
exit 1
fi
if [[ ! -e $grub_conf ]]
then
echo ""
echo_red "$( penguinista ) .: ERROR: '$grub_conf' not a valid file."
cat << _EOF_
FIX: Set a temporary configuration file with '-c /path/to/usb_stick/grub.cfg' option
or a permanent file by opening $script_name in a text editor and modifying the 'grub_conf' variable.

_EOF_
exit 1
fi
}

test_mount() {
## A test to ensure that our modification are
## going to '/MOUNTPOINT/boot' NOT '/boot'
local mountpoint
mountpoint=$(mount | grep $script_device | awk '{print $3}')
if [[ "${mountpoint}/boot" == "/boot" ]]
then
    echo ""
    echo_red "$( penguinista ) .: ERROR: DESTINATION is the root directory... Abort!"
    exit 1
fi
}

test_condition() {
test_root
test_script_device
test_variable
}

mountdir() {
local multi_mnt
multi_mnt="/mnt"
if ! $(mount | grep /dev/${script_device} >/dev/null)
then
    if $(mount | grep ${multi_mnt} >/dev/null)
    then
        echo ""
        echo_red "$( penguinista ) .: ERROR: Mountpoint '${multi_mnt}' is not available for use."
        echo "FIX: Please unmount any partitions attached to $multi_mnt and re-run ${script_name}."
        exit 1
    else
        echo ""
        echo "OK. Mounting /dev/${script_device} to ${multi_mnt}..."
        mount -t vfat /dev/${script_device} $multi_mnt
    fi
fi
}

umountdir() {
if $(mount | grep /dev/${script_device} >/dev/null)
then
    echo ""
    echo "OK... Unmounting /dev/${script_device}..."
    umount /dev/${script_device}
fi
}

createdir() {
mountdir
test_mount
local mountpoint
mountpoint=$(mount | grep $script_device | awk '{print $3}')
echo ""
echo "Creating BOOT and ISO folders..."
mkdir ${mountpoint}/{boot,iso}
}

create_filesystem() {
while :
do
read -n 1 -p \
    "### WARNING ### All data will be wiped from ${script_device}! Proceed? [yN] > "
if [[ $REPLY == [yY] ]]
then
    umountdir
    echo ""
    echo "Creating FAT32 filesystem on ${script_device}..."
    mkfs.vfat -n multiboot /dev/${script_device}
    echo ""
    break
elif [[ $REPLY == [nN] || $REPLY == "" ]]
then
    echo ""
    echo "Abort install."
    echo ""
    echo_green "$( penguinista )"
    exit
else
    invalid_reply_yn
fi
done
}

grub_mbr() {
local mountpoint
mountpoint=$(mount | grep $script_device | awk '{print $3}')
# Install GRUB to the Master Boot Record (MBR) of the USB script_device
echo ""
echo "Installing GRUB to MBR of ${script_device:0:3}..."
grub-install --force --no-floppy --root-directory=$mountpoint /dev/${script_device:0:3}
echo ""
}

grub_cfg() {
mountdir
test_mount
local mountpoint
mountpoint=$(mount | grep $script_device | awk '{print $3}')
local device_grub_conf
device_grub_conf="${mountpoint}/boot/grub/grub.cfg"
echo ""
echo "Copying grub.cfg..."
if [[ -e "$device_grub_conf" ]]
then
    cp $device_grub_conf ${device_grub_conf}.$(date +%Y-%m-%dT%H%M%S).bak
fi
cp $grub_conf $device_grub_conf
echo ""
}

linux_iso() {
local mountpoint
mountpoint=$(mount | grep $script_device | awk '{print $3}')
echo ""
echo "Copying Linux *.iso files..."
## See http://rsync.samba.org/FAQ.html#2 about using the "--modify-window=1"
## option to better manage modification times when using rsync between Linux
## and FAT32 filesystems
rsync --recursive --update --delete --progress --modify-window=1 \
    --include '*iso' --exclude '*' ${iso_dir}/ ${mountpoint}/iso/
# Copy memtest<VERSION>.bin
cp ${iso_dir}/*.bin ${mountpoint}/boot/
sleep 15
echo ""
}

boot_update() {
## Copy grub.cfg
grub_cfg
## Copy Linux distros
linux_iso
}

boot_create() {
## Format script_device
create_filesystem
## Create BOOT + ISO
createdir
## Install GRUB
grub_mbr
## Update grub_conf + ISO
boot_update
}

create_vs_update() {
clear
while :
do
cat << _EOF_

Please make a selection:

0) INSTALL multiple Linux distros and GRUB on $script_device 
1) UPDATE the Linux distros and grub.cfg on $script_device

_EOF_
read -n 1 -p "Your choice? [0-1] > "

case $REPLY in
    0)	echo ""
        echo "OK... INSTALLing..."
	    boot_create
	    break
	    ;;      
    1)	echo ""
        echo "OK... UPDATing..."
	    boot_update
	    break
	    ;;
    *)  invalid_reply
	    ;;
esac
done
}

all_done() {
echo ""
echo_green "$( penguinista ) .: All done!"
}

##: START
run_options "$@"
hello_world
test_condition

##: MULTIBOOT
create_vs_update

##: AU REVOIR
all_done
